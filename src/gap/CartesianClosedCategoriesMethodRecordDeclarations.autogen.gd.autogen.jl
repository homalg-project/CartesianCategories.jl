# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

#! @Chapter Cartesian Categories

#! @Section Add-methods

#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianDualOnMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( alpha ) \mapsto \mathtt[CartesianDualOnMorphisms](alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianDualOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianDualOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianDualOnMorphismsWithGivenCartesianDuals`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, alpha, r ) \mapsto \mathtt[CartesianDualOnMorphismsWithGivenCartesianDuals](s, alpha, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianDualOnMorphismsWithGivenCartesianDuals",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianDualOnMorphismsWithGivenCartesianDuals",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianDualOnObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CartesianDualOnObjects](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianDualOnObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianDualOnObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianEvaluationForCartesianDual`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CartesianEvaluationForCartesianDual](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianEvaluationForCartesianDual",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianEvaluationForCartesianDual",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianEvaluationForCartesianDualWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, r ) \mapsto \mathtt[CartesianEvaluationForCartesianDualWithGivenDirectProduct](s, a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianEvaluationForCartesianDualWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianEvaluationForCartesianDualWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLambdaElimination`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, alpha ) \mapsto \mathtt[CartesianLambdaElimination](a, b, alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLambdaElimination",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLambdaElimination",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLambdaIntroduction`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( alpha ) \mapsto \mathtt[CartesianLambdaIntroduction](alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLambdaIntroduction",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLambdaIntroduction",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftCoevaluationMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[CartesianLeftCoevaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftCoevaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftCoevaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftCoevaluationMorphismWithGivenRange`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, r ) \mapsto \mathtt[CartesianLeftCoevaluationMorphismWithGivenRange](a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftEvaluationMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[CartesianLeftEvaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftEvaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftEvaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftEvaluationMorphismWithGivenSource`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, s ) \mapsto \mathtt[CartesianLeftEvaluationMorphismWithGivenSource](a, b, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianPostComposeMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[CartesianPostComposeMorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianPostComposeMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianPostComposeMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianPostComposeMorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[CartesianPostComposeMorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianPostComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianPostComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianPreComposeMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[CartesianPreComposeMorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianPreComposeMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianPreComposeMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianPreComposeMorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[CartesianPreComposeMorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianPreComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianPreComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightCoevaluationMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[CartesianRightCoevaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightCoevaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightCoevaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightCoevaluationMorphismWithGivenRange`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, r ) \mapsto \mathtt[CartesianRightCoevaluationMorphismWithGivenRange](a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightEvaluationMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[CartesianRightEvaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightEvaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightEvaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightEvaluationMorphismWithGivenSource`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, s ) \mapsto \mathtt[CartesianRightEvaluationMorphismWithGivenSource](a, b, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductCartesianDualityCompatibilityMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[DirectProductCartesianDualityCompatibilityMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductCartesianDualityCompatibilityMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductCartesianDualityCompatibilityMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, r ) \mapsto \mathtt[DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects](s, a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductCartesianDualityCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductCartesianDualityCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductExponentialCompatibilityMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( list ) \mapsto \mathtt[DirectProductExponentialCompatibilityMorphism](list)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductExponentialCompatibilityMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductExponentialCompatibilityMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductExponentialCompatibilityMorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( source, list, range ) \mapsto \mathtt[DirectProductExponentialCompatibilityMorphismWithGivenObjects](source, list, range)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductExponentialCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductExponentialCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialLeftAdjunctMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, f ) \mapsto \mathtt[DirectProductToExponentialLeftAdjunctMorphism](a, b, f)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, f, i ) \mapsto \mathtt[DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential](a, b, f, i)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctMorphismWithGivenExponential",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctMorphismWithGivenExponential",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialLeftAdjunctionIsomorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[DirectProductToExponentialLeftAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialRightAdjunctMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, f ) \mapsto \mathtt[DirectProductToExponentialRightAdjunctMorphism](a, b, f)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialRightAdjunctMorphismWithGivenExponential`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, f, i ) \mapsto \mathtt[DirectProductToExponentialRightAdjunctMorphismWithGivenExponential](a, b, f, i)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctMorphismWithGivenExponential",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctMorphismWithGivenExponential",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialRightAdjunctionIsomorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[DirectProductToExponentialRightAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialOnMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( alpha, beta ) \mapsto \mathtt[ExponentialOnMorphisms](alpha, beta)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialOnMorphismsWithGivenExponentials`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, alpha, beta, r ) \mapsto \mathtt[ExponentialOnMorphismsWithGivenExponentials](s, alpha, beta, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialOnMorphismsWithGivenExponentials",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialOnMorphismsWithGivenExponentials",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialOnObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[ExponentialOnObjects](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialOnObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialOnObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductLeftAdjunctMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( b, c, g ) \mapsto \mathtt[ExponentialToDirectProductLeftAdjunctMorphism](b, c, g)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( b, c, g, s ) \mapsto \mathtt[ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct](b, c, g, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductLeftAdjunctionIsomorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[ExponentialToDirectProductLeftAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductRightAdjunctMorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, c, g ) \mapsto \mathtt[ExponentialToDirectProductRightAdjunctMorphism](a, c, g)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, c, g, s ) \mapsto \mathtt[ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct](a, c, g, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductRightAdjunctionIsomorphism`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[ExponentialToDirectProductRightAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromExponentialToObject`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromExponentialToObject](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromExponentialToObject",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsomorphismFromExponentialToObject",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromExponentialToObjectWithGivenExponential`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, s ) \mapsto \mathtt[IsomorphismFromExponentialToObjectWithGivenExponential](a, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromExponentialToObjectWithGivenExponential",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsomorphismFromExponentialToObjectWithGivenExponential",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromObjectToExponential`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromObjectToExponential](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromObjectToExponential",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsomorphismFromObjectToExponential",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromObjectToExponentialWithGivenExponential`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, r ) \mapsto \mathtt[IsomorphismFromObjectToExponentialWithGivenExponential](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromObjectToExponentialWithGivenExponential",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsomorphismFromObjectToExponentialWithGivenExponential",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismFromDirectProductToExponential`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[MorphismFromDirectProductToExponential](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismFromDirectProductToExponential",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismFromDirectProductToExponential",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismFromDirectProductToExponentialWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, r ) \mapsto \mathtt[MorphismFromDirectProductToExponentialWithGivenObjects](s, a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismFromDirectProductToExponentialWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismFromDirectProductToExponentialWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToCartesianBidual`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[MorphismToCartesianBidual](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismToCartesianBidual",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismToCartesianBidual",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToCartesianBidualWithGivenCartesianBidual`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, r ) \mapsto \mathtt[MorphismToCartesianBidualWithGivenCartesianBidual](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismToCartesianBidualWithGivenCartesianBidual",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismToCartesianBidualWithGivenCartesianBidual",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalPropertyOfCartesianDual`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( t, a, alpha ) \mapsto \mathtt[UniversalPropertyOfCartesianDual](t, a, alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalPropertyOfCartesianDual",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalPropertyOfCartesianDual",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup

