# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## CartesianDualOnMorphisms
@InstallMethod( AddCartesianDualOnMorphisms,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianDualOnMorphisms", category, func, -1 );
    
end );

@InstallMethod( AddCartesianDualOnMorphisms,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianDualOnMorphisms", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianDualOnMorphismsWithGivenCartesianDuals
@InstallMethod( AddCartesianDualOnMorphismsWithGivenCartesianDuals,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianDualOnMorphismsWithGivenCartesianDuals", category, func, -1 );
    
end );

@InstallMethod( AddCartesianDualOnMorphismsWithGivenCartesianDuals,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianDualOnMorphismsWithGivenCartesianDuals", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianDualOnMorphismsWithGivenCartesianDuals,
                    "CartesianDualOnMorphismsWithGivenCartesianDuals by calling CartesianDualOnMorphisms with the WithGiven argument(s) dropped",
                    [
                        [ CartesianDualOnMorphisms, 1 ],
                    ],
  function( cat, s, alpha, r )
    
    return CartesianDualOnMorphisms( cat, alpha );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianDualOnMorphisms,
                    "CartesianDualOnMorphisms by calling CartesianDualOnMorphismsWithGivenCartesianDuals with the WithGiven object(s)",
                    [
                        [ CartesianDualOnMorphismsWithGivenCartesianDuals, 1 ],
                        [ CartesianDualOnObjects, 2 ],
                    ],
  function( cat, alpha )
    
    return CartesianDualOnMorphismsWithGivenCartesianDuals( cat, CartesianDualOnObjects( cat, Range( alpha ) ), alpha, CartesianDualOnObjects( cat, Source( alpha ) ) );
    
end; is_with_given_derivation = true );

## CartesianDualOnObjects
@InstallMethod( AddCartesianDualOnObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianDualOnObjects", category, func, -1 );
    
end );

@InstallMethod( AddCartesianDualOnObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianDualOnObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianEvaluationForCartesianDual
@InstallMethod( AddCartesianEvaluationForCartesianDual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianEvaluationForCartesianDual", category, func, -1 );
    
end );

@InstallMethod( AddCartesianEvaluationForCartesianDual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianEvaluationForCartesianDual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianEvaluationForCartesianDualWithGivenDirectProduct
@InstallMethod( AddCartesianEvaluationForCartesianDualWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianEvaluationForCartesianDualWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddCartesianEvaluationForCartesianDualWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianEvaluationForCartesianDualWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianEvaluationForCartesianDualWithGivenDirectProduct,
                    "CartesianEvaluationForCartesianDualWithGivenDirectProduct by calling CartesianEvaluationForCartesianDual with the WithGiven argument(s) dropped",
                    [
                        [ CartesianEvaluationForCartesianDual, 1 ],
                    ],
  function( cat, s, a, r )
    
    return CartesianEvaluationForCartesianDual( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianEvaluationForCartesianDual,
                    "CartesianEvaluationForCartesianDual by calling CartesianEvaluationForCartesianDualWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ CartesianEvaluationForCartesianDualWithGivenDirectProduct, 1 ],
                        [ DirectProduct, 1 ],
                        [ CartesianDualOnObjects, 1 ],
                        [ TerminalObject, 1 ],
                    ],
  function( cat, a )
    
    return CartesianEvaluationForCartesianDualWithGivenDirectProduct( cat, BinaryDirectProduct( cat, CartesianDualOnObjects( cat, a ), a ), a, TerminalObject( cat ) );
    
end; is_with_given_derivation = true );

## CartesianLambdaElimination
@InstallMethod( AddCartesianLambdaElimination,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLambdaElimination", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLambdaElimination,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLambdaElimination", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLambdaIntroduction
@InstallMethod( AddCartesianLambdaIntroduction,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLambdaIntroduction", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLambdaIntroduction,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLambdaIntroduction", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLeftCoevaluationMorphism
@InstallMethod( AddCartesianLeftCoevaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftCoevaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftCoevaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftCoevaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLeftCoevaluationMorphismWithGivenRange
@InstallMethod( AddCartesianLeftCoevaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftCoevaluationMorphismWithGivenRange", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftCoevaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftCoevaluationMorphismWithGivenRange", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianLeftCoevaluationMorphismWithGivenRange,
                    "CartesianLeftCoevaluationMorphismWithGivenRange by calling CartesianLeftCoevaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CartesianLeftCoevaluationMorphism, 1 ],
                    ],
  function( cat, a, b, r )
    
    return CartesianLeftCoevaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianLeftCoevaluationMorphism,
                    "CartesianLeftCoevaluationMorphism by calling CartesianLeftCoevaluationMorphismWithGivenRange with the WithGiven object(s)",
                    [
                        [ CartesianLeftCoevaluationMorphismWithGivenRange, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a, b )
    
    return CartesianLeftCoevaluationMorphismWithGivenRange( cat, a, b, ExponentialOnObjects( cat, a, BinaryDirectProduct( cat, b, a ) ) );
    
end; is_with_given_derivation = true );

## CartesianLeftEvaluationMorphism
@InstallMethod( AddCartesianLeftEvaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftEvaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftEvaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftEvaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLeftEvaluationMorphismWithGivenSource
@InstallMethod( AddCartesianLeftEvaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftEvaluationMorphismWithGivenSource", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftEvaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftEvaluationMorphismWithGivenSource", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianLeftEvaluationMorphismWithGivenSource,
                    "CartesianLeftEvaluationMorphismWithGivenSource by calling CartesianLeftEvaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CartesianLeftEvaluationMorphism, 1 ],
                    ],
  function( cat, a, b, s )
    
    return CartesianLeftEvaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianLeftEvaluationMorphism,
                    "CartesianLeftEvaluationMorphism by calling CartesianLeftEvaluationMorphismWithGivenSource with the WithGiven object(s)",
                    [
                        [ CartesianLeftEvaluationMorphismWithGivenSource, 1 ],
                        [ DirectProduct, 1 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b )
    
    return CartesianLeftEvaluationMorphismWithGivenSource( cat, a, b, BinaryDirectProduct( cat, ExponentialOnObjects( cat, a, b ), a ) );
    
end; is_with_given_derivation = true );

## CartesianPostComposeMorphism
@InstallMethod( AddCartesianPostComposeMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianPostComposeMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCartesianPostComposeMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianPostComposeMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianPostComposeMorphismWithGivenObjects
@InstallMethod( AddCartesianPostComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianPostComposeMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddCartesianPostComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianPostComposeMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianPostComposeMorphismWithGivenObjects,
                    "CartesianPostComposeMorphismWithGivenObjects by calling CartesianPostComposeMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CartesianPostComposeMorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CartesianPostComposeMorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianPostComposeMorphism,
                    "CartesianPostComposeMorphism by calling CartesianPostComposeMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ CartesianPostComposeMorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ ExponentialOnObjects, 3 ],
                    ],
  function( cat, a, b, c )
    
    return CartesianPostComposeMorphismWithGivenObjects( cat, BinaryDirectProduct( cat, ExponentialOnObjects( cat, b, c ), ExponentialOnObjects( cat, a, b ) ), a, b, c, ExponentialOnObjects( cat, a, c ) );
    
end; is_with_given_derivation = true );

## CartesianPreComposeMorphism
@InstallMethod( AddCartesianPreComposeMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianPreComposeMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCartesianPreComposeMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianPreComposeMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianPreComposeMorphismWithGivenObjects
@InstallMethod( AddCartesianPreComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianPreComposeMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddCartesianPreComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianPreComposeMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianPreComposeMorphismWithGivenObjects,
                    "CartesianPreComposeMorphismWithGivenObjects by calling CartesianPreComposeMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CartesianPreComposeMorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CartesianPreComposeMorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianPreComposeMorphism,
                    "CartesianPreComposeMorphism by calling CartesianPreComposeMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ CartesianPreComposeMorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ ExponentialOnObjects, 3 ],
                    ],
  function( cat, a, b, c )
    
    return CartesianPreComposeMorphismWithGivenObjects( cat, BinaryDirectProduct( cat, ExponentialOnObjects( cat, a, b ), ExponentialOnObjects( cat, b, c ) ), a, b, c, ExponentialOnObjects( cat, a, c ) );
    
end; is_with_given_derivation = true );

## CartesianRightCoevaluationMorphism
@InstallMethod( AddCartesianRightCoevaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightCoevaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightCoevaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightCoevaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianRightCoevaluationMorphismWithGivenRange
@InstallMethod( AddCartesianRightCoevaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightCoevaluationMorphismWithGivenRange", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightCoevaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightCoevaluationMorphismWithGivenRange", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianRightCoevaluationMorphismWithGivenRange,
                    "CartesianRightCoevaluationMorphismWithGivenRange by calling CartesianRightCoevaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CartesianRightCoevaluationMorphism, 1 ],
                    ],
  function( cat, a, b, r )
    
    return CartesianRightCoevaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianRightCoevaluationMorphism,
                    "CartesianRightCoevaluationMorphism by calling CartesianRightCoevaluationMorphismWithGivenRange with the WithGiven object(s)",
                    [
                        [ CartesianRightCoevaluationMorphismWithGivenRange, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a, b )
    
    return CartesianRightCoevaluationMorphismWithGivenRange( cat, a, b, ExponentialOnObjects( cat, a, BinaryDirectProduct( cat, a, b ) ) );
    
end; is_with_given_derivation = true );

## CartesianRightEvaluationMorphism
@InstallMethod( AddCartesianRightEvaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightEvaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightEvaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightEvaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianRightEvaluationMorphismWithGivenSource
@InstallMethod( AddCartesianRightEvaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightEvaluationMorphismWithGivenSource", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightEvaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightEvaluationMorphismWithGivenSource", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianRightEvaluationMorphismWithGivenSource,
                    "CartesianRightEvaluationMorphismWithGivenSource by calling CartesianRightEvaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CartesianRightEvaluationMorphism, 1 ],
                    ],
  function( cat, a, b, s )
    
    return CartesianRightEvaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianRightEvaluationMorphism,
                    "CartesianRightEvaluationMorphism by calling CartesianRightEvaluationMorphismWithGivenSource with the WithGiven object(s)",
                    [
                        [ CartesianRightEvaluationMorphismWithGivenSource, 1 ],
                        [ DirectProduct, 1 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b )
    
    return CartesianRightEvaluationMorphismWithGivenSource( cat, a, b, BinaryDirectProduct( cat, a, ExponentialOnObjects( cat, a, b ) ) );
    
end; is_with_given_derivation = true );

## DirectProductCartesianDualityCompatibilityMorphism
@InstallMethod( AddDirectProductCartesianDualityCompatibilityMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductCartesianDualityCompatibilityMorphism", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductCartesianDualityCompatibilityMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductCartesianDualityCompatibilityMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects
@InstallMethod( AddDirectProductCartesianDualityCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductCartesianDualityCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects,
                    "DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects by calling DirectProductCartesianDualityCompatibilityMorphism with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductCartesianDualityCompatibilityMorphism, 1 ],
                    ],
  function( cat, s, a, b, r )
    
    return DirectProductCartesianDualityCompatibilityMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductCartesianDualityCompatibilityMorphism,
                    "DirectProductCartesianDualityCompatibilityMorphism by calling DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 2 ],
                        [ CartesianDualOnObjects, 3 ],
                    ],
  function( cat, a, b )
    
    return DirectProductCartesianDualityCompatibilityMorphismWithGivenObjects( cat, BinaryDirectProduct( cat, CartesianDualOnObjects( cat, a ), CartesianDualOnObjects( cat, b ) ), a, b, CartesianDualOnObjects( cat, BinaryDirectProduct( cat, a, b ) ) );
    
end; is_with_given_derivation = true );

## DirectProductExponentialCompatibilityMorphism
@InstallMethod( AddDirectProductExponentialCompatibilityMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductExponentialCompatibilityMorphism", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductExponentialCompatibilityMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductExponentialCompatibilityMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductExponentialCompatibilityMorphismWithGivenObjects
@InstallMethod( AddDirectProductExponentialCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductExponentialCompatibilityMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductExponentialCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductExponentialCompatibilityMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductExponentialCompatibilityMorphismWithGivenObjects,
                    "DirectProductExponentialCompatibilityMorphismWithGivenObjects by calling DirectProductExponentialCompatibilityMorphism with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductExponentialCompatibilityMorphism, 1 ],
                    ],
  function( cat, source, list, range )
    
    return DirectProductExponentialCompatibilityMorphism( cat, list );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductExponentialCompatibilityMorphism,
                    "DirectProductExponentialCompatibilityMorphism by calling DirectProductExponentialCompatibilityMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ DirectProductExponentialCompatibilityMorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 3 ],
                        [ ExponentialOnObjects, 3 ],
                    ],
  function( cat, list )
    
    return DirectProductExponentialCompatibilityMorphismWithGivenObjects( cat, BinaryDirectProduct( cat, ExponentialOnObjects( cat, list[1], list[2] ), ExponentialOnObjects( cat, list[3], list[4] ) ), list, ExponentialOnObjects( cat, BinaryDirectProduct( cat, list[1], list[3] ), BinaryDirectProduct( cat, list[2], list[4] ) ) );
    
end; is_with_given_derivation = true );

## DirectProductToExponentialLeftAdjunctMorphism
@InstallMethod( AddDirectProductToExponentialLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialLeftAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialLeftAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential
@InstallMethod( AddDirectProductToExponentialLeftAdjunctMorphismWithGivenExponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialLeftAdjunctMorphismWithGivenExponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential,
                    "DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential by calling DirectProductToExponentialLeftAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductToExponentialLeftAdjunctMorphism, 1 ],
                    ],
  function( cat, a, b, f, i )
    
    return DirectProductToExponentialLeftAdjunctMorphism( cat, a, b, f );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductToExponentialLeftAdjunctMorphism,
                    "DirectProductToExponentialLeftAdjunctMorphism by calling DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential with the WithGiven object(s)",
                    [
                        [ DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential, 1 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b, f )
    
    return DirectProductToExponentialLeftAdjunctMorphismWithGivenExponential( cat, a, b, f, ExponentialOnObjects( cat, b, Range( f ) ) );
    
end; is_with_given_derivation = true );

## DirectProductToExponentialLeftAdjunctionIsomorphism
@InstallMethod( AddDirectProductToExponentialLeftAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialLeftAdjunctionIsomorphism", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialLeftAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialLeftAdjunctionIsomorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects
@InstallMethod( AddDirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects,
                    "DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects by calling DirectProductToExponentialLeftAdjunctionIsomorphism with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductToExponentialLeftAdjunctionIsomorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return DirectProductToExponentialLeftAdjunctionIsomorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductToExponentialLeftAdjunctionIsomorphism,
                    "DirectProductToExponentialLeftAdjunctionIsomorphism by calling DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ HomomorphismStructureOnObjects, 2 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b, c )
    
    return DirectProductToExponentialLeftAdjunctionIsomorphismWithGivenObjects( cat, HomomorphismStructureOnObjects( cat, BinaryDirectProduct( cat, a, b ), c ), a, b, c, HomomorphismStructureOnObjects( cat, a, ExponentialOnObjects( cat, b, c ) ) );
    
end; is_with_given_derivation = true );

## DirectProductToExponentialRightAdjunctMorphism
@InstallMethod( AddDirectProductToExponentialRightAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialRightAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialRightAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialRightAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductToExponentialRightAdjunctMorphismWithGivenExponential
@InstallMethod( AddDirectProductToExponentialRightAdjunctMorphismWithGivenExponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialRightAdjunctMorphismWithGivenExponential", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialRightAdjunctMorphismWithGivenExponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialRightAdjunctMorphismWithGivenExponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductToExponentialRightAdjunctMorphismWithGivenExponential,
                    "DirectProductToExponentialRightAdjunctMorphismWithGivenExponential by calling DirectProductToExponentialRightAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductToExponentialRightAdjunctMorphism, 1 ],
                    ],
  function( cat, a, b, f, i )
    
    return DirectProductToExponentialRightAdjunctMorphism( cat, a, b, f );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductToExponentialRightAdjunctMorphism,
                    "DirectProductToExponentialRightAdjunctMorphism by calling DirectProductToExponentialRightAdjunctMorphismWithGivenExponential with the WithGiven object(s)",
                    [
                        [ DirectProductToExponentialRightAdjunctMorphismWithGivenExponential, 1 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b, f )
    
    return DirectProductToExponentialRightAdjunctMorphismWithGivenExponential( cat, a, b, f, ExponentialOnObjects( cat, a, Range( f ) ) );
    
end; is_with_given_derivation = true );

## DirectProductToExponentialRightAdjunctionIsomorphism
@InstallMethod( AddDirectProductToExponentialRightAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialRightAdjunctionIsomorphism", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialRightAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialRightAdjunctionIsomorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects
@InstallMethod( AddDirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects,
                    "DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects by calling DirectProductToExponentialRightAdjunctionIsomorphism with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductToExponentialRightAdjunctionIsomorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return DirectProductToExponentialRightAdjunctionIsomorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductToExponentialRightAdjunctionIsomorphism,
                    "DirectProductToExponentialRightAdjunctionIsomorphism by calling DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ HomomorphismStructureOnObjects, 2 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b, c )
    
    return DirectProductToExponentialRightAdjunctionIsomorphismWithGivenObjects( cat, HomomorphismStructureOnObjects( cat, BinaryDirectProduct( cat, a, b ), c ), a, b, c, HomomorphismStructureOnObjects( cat, b, ExponentialOnObjects( cat, a, c ) ) );
    
end; is_with_given_derivation = true );

## ExponentialOnMorphisms
@InstallMethod( AddExponentialOnMorphisms,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialOnMorphisms", category, func, -1 );
    
end );

@InstallMethod( AddExponentialOnMorphisms,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialOnMorphisms", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## ExponentialOnMorphismsWithGivenExponentials
@InstallMethod( AddExponentialOnMorphismsWithGivenExponentials,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialOnMorphismsWithGivenExponentials", category, func, -1 );
    
end );

@InstallMethod( AddExponentialOnMorphismsWithGivenExponentials,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialOnMorphismsWithGivenExponentials", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ExponentialOnMorphismsWithGivenExponentials,
                    "ExponentialOnMorphismsWithGivenExponentials by calling ExponentialOnMorphisms with the WithGiven argument(s) dropped",
                    [
                        [ ExponentialOnMorphisms, 1 ],
                    ],
  function( cat, s, alpha, beta, r )
    
    return ExponentialOnMorphisms( cat, alpha, beta );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( ExponentialOnMorphisms,
                    "ExponentialOnMorphisms by calling ExponentialOnMorphismsWithGivenExponentials with the WithGiven object(s)",
                    [
                        [ ExponentialOnMorphismsWithGivenExponentials, 1 ],
                        [ ExponentialOnObjects, 2 ],
                    ],
  function( cat, alpha, beta )
    
    return ExponentialOnMorphismsWithGivenExponentials( cat, ExponentialOnObjects( cat, Range( alpha ), Source( beta ) ), alpha, beta, ExponentialOnObjects( cat, Source( alpha ), Range( beta ) ) );
    
end; is_with_given_derivation = true );

## ExponentialOnObjects
@InstallMethod( AddExponentialOnObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialOnObjects", category, func, -1 );
    
end );

@InstallMethod( AddExponentialOnObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialOnObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## ExponentialToDirectProductLeftAdjunctMorphism
@InstallMethod( AddExponentialToDirectProductLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductLeftAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductLeftAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct
@InstallMethod( AddExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct,
                    "ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct by calling ExponentialToDirectProductLeftAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ ExponentialToDirectProductLeftAdjunctMorphism, 1 ],
                    ],
  function( cat, b, c, g, s )
    
    return ExponentialToDirectProductLeftAdjunctMorphism( cat, b, c, g );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( ExponentialToDirectProductLeftAdjunctMorphism,
                    "ExponentialToDirectProductLeftAdjunctMorphism by calling ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, b, c, g )
    
    return ExponentialToDirectProductLeftAdjunctMorphismWithGivenDirectProduct( cat, b, c, g, BinaryDirectProduct( cat, Source( g ), b ) );
    
end; is_with_given_derivation = true );

## ExponentialToDirectProductLeftAdjunctionIsomorphism
@InstallMethod( AddExponentialToDirectProductLeftAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductLeftAdjunctionIsomorphism", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductLeftAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductLeftAdjunctionIsomorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects
@InstallMethod( AddExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects,
                    "ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects by calling ExponentialToDirectProductLeftAdjunctionIsomorphism with the WithGiven argument(s) dropped",
                    [
                        [ ExponentialToDirectProductLeftAdjunctionIsomorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return ExponentialToDirectProductLeftAdjunctionIsomorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( ExponentialToDirectProductLeftAdjunctionIsomorphism,
                    "ExponentialToDirectProductLeftAdjunctionIsomorphism by calling ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ HomomorphismStructureOnObjects, 2 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a, b, c )
    
    return ExponentialToDirectProductLeftAdjunctionIsomorphismWithGivenObjects( cat, HomomorphismStructureOnObjects( cat, a, ExponentialOnObjects( cat, b, c ) ), a, b, c, HomomorphismStructureOnObjects( cat, BinaryDirectProduct( cat, a, b ), c ) );
    
end; is_with_given_derivation = true );

## ExponentialToDirectProductRightAdjunctMorphism
@InstallMethod( AddExponentialToDirectProductRightAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductRightAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductRightAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductRightAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct
@InstallMethod( AddExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct,
                    "ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct by calling ExponentialToDirectProductRightAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ ExponentialToDirectProductRightAdjunctMorphism, 1 ],
                    ],
  function( cat, a, c, g, s )
    
    return ExponentialToDirectProductRightAdjunctMorphism( cat, a, c, g );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( ExponentialToDirectProductRightAdjunctMorphism,
                    "ExponentialToDirectProductRightAdjunctMorphism by calling ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a, c, g )
    
    return ExponentialToDirectProductRightAdjunctMorphismWithGivenDirectProduct( cat, a, c, g, BinaryDirectProduct( cat, a, Source( g ) ) );
    
end; is_with_given_derivation = true );

## ExponentialToDirectProductRightAdjunctionIsomorphism
@InstallMethod( AddExponentialToDirectProductRightAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductRightAdjunctionIsomorphism", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductRightAdjunctionIsomorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductRightAdjunctionIsomorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects
@InstallMethod( AddExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects,
                    "ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects by calling ExponentialToDirectProductRightAdjunctionIsomorphism with the WithGiven argument(s) dropped",
                    [
                        [ ExponentialToDirectProductRightAdjunctionIsomorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return ExponentialToDirectProductRightAdjunctionIsomorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( ExponentialToDirectProductRightAdjunctionIsomorphism,
                    "ExponentialToDirectProductRightAdjunctionIsomorphism by calling ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ HomomorphismStructureOnObjects, 2 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a, b, c )
    
    return ExponentialToDirectProductRightAdjunctionIsomorphismWithGivenObjects( cat, HomomorphismStructureOnObjects( cat, b, ExponentialOnObjects( cat, a, c ) ), a, b, c, HomomorphismStructureOnObjects( cat, BinaryDirectProduct( cat, a, b ), c ) );
    
end; is_with_given_derivation = true );

## IsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject
@InstallMethod( AddIsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromCartesianDualObjectToExponentialIntoTerminalObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject
@InstallMethod( AddIsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromExponentialIntoTerminalObjectToCartesianDualObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromExponentialToObject
@InstallMethod( AddIsomorphismFromExponentialToObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromExponentialToObject", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromExponentialToObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromExponentialToObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromExponentialToObjectWithGivenExponential
@InstallMethod( AddIsomorphismFromExponentialToObjectWithGivenExponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromExponentialToObjectWithGivenExponential", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromExponentialToObjectWithGivenExponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromExponentialToObjectWithGivenExponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( IsomorphismFromExponentialToObjectWithGivenExponential,
                    "IsomorphismFromExponentialToObjectWithGivenExponential by calling IsomorphismFromExponentialToObject with the WithGiven argument(s) dropped",
                    [
                        [ IsomorphismFromExponentialToObject, 1 ],
                    ],
  function( cat, a, s )
    
    return IsomorphismFromExponentialToObject( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( IsomorphismFromExponentialToObject,
                    "IsomorphismFromExponentialToObject by calling IsomorphismFromExponentialToObjectWithGivenExponential with the WithGiven object(s)",
                    [
                        [ IsomorphismFromExponentialToObjectWithGivenExponential, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ TerminalObject, 1 ],
                    ],
  function( cat, a )
    
    return IsomorphismFromExponentialToObjectWithGivenExponential( cat, a, ExponentialOnObjects( cat, TerminalObject( cat ), a ) );
    
end; is_with_given_derivation = true );

## IsomorphismFromObjectToExponential
@InstallMethod( AddIsomorphismFromObjectToExponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromObjectToExponential", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromObjectToExponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromObjectToExponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromObjectToExponentialWithGivenExponential
@InstallMethod( AddIsomorphismFromObjectToExponentialWithGivenExponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromObjectToExponentialWithGivenExponential", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromObjectToExponentialWithGivenExponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromObjectToExponentialWithGivenExponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( IsomorphismFromObjectToExponentialWithGivenExponential,
                    "IsomorphismFromObjectToExponentialWithGivenExponential by calling IsomorphismFromObjectToExponential with the WithGiven argument(s) dropped",
                    [
                        [ IsomorphismFromObjectToExponential, 1 ],
                    ],
  function( cat, a, r )
    
    return IsomorphismFromObjectToExponential( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( IsomorphismFromObjectToExponential,
                    "IsomorphismFromObjectToExponential by calling IsomorphismFromObjectToExponentialWithGivenExponential with the WithGiven object(s)",
                    [
                        [ IsomorphismFromObjectToExponentialWithGivenExponential, 1 ],
                        [ ExponentialOnObjects, 1 ],
                        [ TerminalObject, 1 ],
                    ],
  function( cat, a )
    
    return IsomorphismFromObjectToExponentialWithGivenExponential( cat, a, ExponentialOnObjects( cat, TerminalObject( cat ), a ) );
    
end; is_with_given_derivation = true );

## MorphismFromDirectProductToExponential
@InstallMethod( AddMorphismFromDirectProductToExponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromDirectProductToExponential", category, func, -1 );
    
end );

@InstallMethod( AddMorphismFromDirectProductToExponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromDirectProductToExponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## MorphismFromDirectProductToExponentialWithGivenObjects
@InstallMethod( AddMorphismFromDirectProductToExponentialWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromDirectProductToExponentialWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddMorphismFromDirectProductToExponentialWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromDirectProductToExponentialWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MorphismFromDirectProductToExponentialWithGivenObjects,
                    "MorphismFromDirectProductToExponentialWithGivenObjects by calling MorphismFromDirectProductToExponential with the WithGiven argument(s) dropped",
                    [
                        [ MorphismFromDirectProductToExponential, 1 ],
                    ],
  function( cat, s, a, b, r )
    
    return MorphismFromDirectProductToExponential( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( MorphismFromDirectProductToExponential,
                    "MorphismFromDirectProductToExponential by calling MorphismFromDirectProductToExponentialWithGivenObjects with the WithGiven object(s)",
                    [
                        [ MorphismFromDirectProductToExponentialWithGivenObjects, 1 ],
                        [ DirectProduct, 1 ],
                        [ CartesianDualOnObjects, 1 ],
                        [ ExponentialOnObjects, 1 ],
                    ],
  function( cat, a, b )
    
    return MorphismFromDirectProductToExponentialWithGivenObjects( cat, BinaryDirectProduct( cat, CartesianDualOnObjects( cat, a ), b ), a, b, ExponentialOnObjects( cat, a, b ) );
    
end; is_with_given_derivation = true );

## MorphismToCartesianBidual
@InstallMethod( AddMorphismToCartesianBidual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismToCartesianBidual", category, func, -1 );
    
end );

@InstallMethod( AddMorphismToCartesianBidual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismToCartesianBidual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## MorphismToCartesianBidualWithGivenCartesianBidual
@InstallMethod( AddMorphismToCartesianBidualWithGivenCartesianBidual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismToCartesianBidualWithGivenCartesianBidual", category, func, -1 );
    
end );

@InstallMethod( AddMorphismToCartesianBidualWithGivenCartesianBidual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismToCartesianBidualWithGivenCartesianBidual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MorphismToCartesianBidualWithGivenCartesianBidual,
                    "MorphismToCartesianBidualWithGivenCartesianBidual by calling MorphismToCartesianBidual with the WithGiven argument(s) dropped",
                    [
                        [ MorphismToCartesianBidual, 1 ],
                    ],
  function( cat, a, r )
    
    return MorphismToCartesianBidual( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( MorphismToCartesianBidual,
                    "MorphismToCartesianBidual by calling MorphismToCartesianBidualWithGivenCartesianBidual with the WithGiven object(s)",
                    [
                        [ MorphismToCartesianBidualWithGivenCartesianBidual, 1 ],
                        [ CartesianDualOnObjects, 2 ],
                    ],
  function( cat, a )
    
    return MorphismToCartesianBidualWithGivenCartesianBidual( cat, a, CartesianDualOnObjects( cat, CartesianDualOnObjects( cat, a ) ) );
    
end; is_with_given_derivation = true );

## UniversalPropertyOfCartesianDual
@InstallMethod( AddUniversalPropertyOfCartesianDual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalPropertyOfCartesianDual", category, func, -1 );
    
end );

@InstallMethod( AddUniversalPropertyOfCartesianDual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalPropertyOfCartesianDual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);
