# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## CocartesianBraiding
@InstallMethod( AddCocartesianBraiding,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianBraiding", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianBraiding,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianBraiding", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianBraidingInverse
@InstallMethod( AddCocartesianBraidingInverse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianBraidingInverse", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianBraidingInverse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianBraidingInverse", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianBraidingInverseWithGivenCoproducts
@InstallMethod( AddCocartesianBraidingInverseWithGivenCoproducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianBraidingInverseWithGivenCoproducts", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianBraidingInverseWithGivenCoproducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianBraidingInverseWithGivenCoproducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianBraidingInverseWithGivenCoproducts,
                    "CocartesianBraidingInverseWithGivenCoproducts by calling CocartesianBraidingInverse with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianBraidingInverse, 1 ],
                    ],
  function( cat, s, a, b, r )
    
    return CocartesianBraidingInverse( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianBraidingInverse,
                    "CocartesianBraidingInverse by calling CocartesianBraidingInverseWithGivenCoproducts with the WithGiven object(s)",
                    [
                        [ CocartesianBraidingInverseWithGivenCoproducts, 1 ],
                        [ Coproduct, 2 ],
                    ],
  function( cat, a, b )
    
    return CocartesianBraidingInverseWithGivenCoproducts( cat, BinaryCoproduct( cat, b, a ), a, b, BinaryCoproduct( cat, a, b ) );
    
end; is_with_given_derivation = true );

## CocartesianBraidingWithGivenCoproducts
@InstallMethod( AddCocartesianBraidingWithGivenCoproducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianBraidingWithGivenCoproducts", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianBraidingWithGivenCoproducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianBraidingWithGivenCoproducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianBraidingWithGivenCoproducts,
                    "CocartesianBraidingWithGivenCoproducts by calling CocartesianBraiding with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianBraiding, 1 ],
                    ],
  function( cat, s, a, b, r )
    
    return CocartesianBraiding( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianBraiding,
                    "CocartesianBraiding by calling CocartesianBraidingWithGivenCoproducts with the WithGiven object(s)",
                    [
                        [ CocartesianBraidingWithGivenCoproducts, 1 ],
                        [ Coproduct, 2 ],
                    ],
  function( cat, a, b )
    
    return CocartesianBraidingWithGivenCoproducts( cat, BinaryCoproduct( cat, a, b ), a, b, BinaryCoproduct( cat, b, a ) );
    
end; is_with_given_derivation = true );
