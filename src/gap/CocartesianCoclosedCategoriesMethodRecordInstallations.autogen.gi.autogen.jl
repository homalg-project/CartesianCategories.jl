# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## CocartesianDualOnMorphisms
@InstallMethod( AddCocartesianDualOnMorphisms,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianDualOnMorphisms", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianDualOnMorphisms,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianDualOnMorphisms", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianDualOnMorphismsWithGivenCocartesianDuals
@InstallMethod( AddCocartesianDualOnMorphismsWithGivenCocartesianDuals,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianDualOnMorphismsWithGivenCocartesianDuals", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianDualOnMorphismsWithGivenCocartesianDuals,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianDualOnMorphismsWithGivenCocartesianDuals", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianDualOnMorphismsWithGivenCocartesianDuals,
                    "CocartesianDualOnMorphismsWithGivenCocartesianDuals by calling CocartesianDualOnMorphisms with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianDualOnMorphisms, 1 ],
                    ],
  function( cat, s, alpha, r )
    
    return CocartesianDualOnMorphisms( cat, alpha );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianDualOnMorphisms,
                    "CocartesianDualOnMorphisms by calling CocartesianDualOnMorphismsWithGivenCocartesianDuals with the WithGiven object(s)",
                    [
                        [ CocartesianDualOnMorphismsWithGivenCocartesianDuals, 1 ],
                        [ CocartesianDualOnObjects, 2 ],
                    ],
  function( cat, alpha )
    
    return CocartesianDualOnMorphismsWithGivenCocartesianDuals( cat, CocartesianDualOnObjects( cat, Range( alpha ) ), alpha, CocartesianDualOnObjects( cat, Source( alpha ) ) );
    
end; is_with_given_derivation = true );

## CocartesianDualOnObjects
@InstallMethod( AddCocartesianDualOnObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianDualOnObjects", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianDualOnObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianDualOnObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianDualityCoproductCompatibilityMorphism
@InstallMethod( AddCocartesianDualityCoproductCompatibilityMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianDualityCoproductCompatibilityMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianDualityCoproductCompatibilityMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianDualityCoproductCompatibilityMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects
@InstallMethod( AddCocartesianDualityCoproductCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianDualityCoproductCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects,
                    "CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects by calling CocartesianDualityCoproductCompatibilityMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianDualityCoproductCompatibilityMorphism, 1 ],
                    ],
  function( cat, s, a, b, r )
    
    return CocartesianDualityCoproductCompatibilityMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianDualityCoproductCompatibilityMorphism,
                    "CocartesianDualityCoproductCompatibilityMorphism by calling CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects, 1 ],
                        [ CocartesianDualOnObjects, 3 ],
                        [ Coproduct, 2 ],
                    ],
  function( cat, a, b )
    
    return CocartesianDualityCoproductCompatibilityMorphismWithGivenObjects( cat, CocartesianDualOnObjects( cat, BinaryCoproduct( cat, a, b ) ), a, b, BinaryCoproduct( cat, CocartesianDualOnObjects( cat, a ), CocartesianDualOnObjects( cat, b ) ) );
    
end; is_with_given_derivation = true );

## CocartesianEvaluationForCocartesianDual
@InstallMethod( AddCocartesianEvaluationForCocartesianDual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianEvaluationForCocartesianDual", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianEvaluationForCocartesianDual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianEvaluationForCocartesianDual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianEvaluationForCocartesianDualWithGivenCoproduct
@InstallMethod( AddCocartesianEvaluationForCocartesianDualWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianEvaluationForCocartesianDualWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianEvaluationForCocartesianDualWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianEvaluationForCocartesianDualWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianEvaluationForCocartesianDualWithGivenCoproduct,
                    "CocartesianEvaluationForCocartesianDualWithGivenCoproduct by calling CocartesianEvaluationForCocartesianDual with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianEvaluationForCocartesianDual, 1 ],
                    ],
  function( cat, s, a, r )
    
    return CocartesianEvaluationForCocartesianDual( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianEvaluationForCocartesianDual,
                    "CocartesianEvaluationForCocartesianDual by calling CocartesianEvaluationForCocartesianDualWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CocartesianEvaluationForCocartesianDualWithGivenCoproduct, 1 ],
                        [ InitialObject, 1 ],
                        [ Coproduct, 1 ],
                        [ CocartesianDualOnObjects, 1 ],
                    ],
  function( cat, a )
    
    return CocartesianEvaluationForCocartesianDualWithGivenCoproduct( cat, InitialObject( cat ), a, BinaryCoproduct( cat, CocartesianDualOnObjects( cat, a ), a ) );
    
end; is_with_given_derivation = true );

## CocartesianLambdaElimination
@InstallMethod( AddCocartesianLambdaElimination,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLambdaElimination", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLambdaElimination,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLambdaElimination", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLambdaIntroduction
@InstallMethod( AddCocartesianLambdaIntroduction,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLambdaIntroduction", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLambdaIntroduction,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLambdaIntroduction", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLeftCoevaluationMorphism
@InstallMethod( AddCocartesianLeftCoevaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftCoevaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftCoevaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftCoevaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLeftCoevaluationMorphismWithGivenSource
@InstallMethod( AddCocartesianLeftCoevaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftCoevaluationMorphismWithGivenSource", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftCoevaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftCoevaluationMorphismWithGivenSource", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianLeftCoevaluationMorphismWithGivenSource,
                    "CocartesianLeftCoevaluationMorphismWithGivenSource by calling CocartesianLeftCoevaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianLeftCoevaluationMorphism, 1 ],
                    ],
  function( cat, a, b, s )
    
    return CocartesianLeftCoevaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianLeftCoevaluationMorphism,
                    "CocartesianLeftCoevaluationMorphism by calling CocartesianLeftCoevaluationMorphismWithGivenSource with the WithGiven object(s)",
                    [
                        [ CocartesianLeftCoevaluationMorphismWithGivenSource, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a, b )
    
    return CocartesianLeftCoevaluationMorphismWithGivenSource( cat, a, b, CoexponentialOnObjects( cat, BinaryCoproduct( cat, b, a ), a ) );
    
end; is_with_given_derivation = true );

## CocartesianLeftEvaluationMorphism
@InstallMethod( AddCocartesianLeftEvaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftEvaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftEvaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftEvaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLeftEvaluationMorphismWithGivenRange
@InstallMethod( AddCocartesianLeftEvaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftEvaluationMorphismWithGivenRange", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftEvaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftEvaluationMorphismWithGivenRange", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianLeftEvaluationMorphismWithGivenRange,
                    "CocartesianLeftEvaluationMorphismWithGivenRange by calling CocartesianLeftEvaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianLeftEvaluationMorphism, 1 ],
                    ],
  function( cat, a, b, r )
    
    return CocartesianLeftEvaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianLeftEvaluationMorphism,
                    "CocartesianLeftEvaluationMorphism by calling CocartesianLeftEvaluationMorphismWithGivenRange with the WithGiven object(s)",
                    [
                        [ CocartesianLeftEvaluationMorphismWithGivenRange, 1 ],
                        [ Coproduct, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                    ],
  function( cat, a, b )
    
    return CocartesianLeftEvaluationMorphismWithGivenRange( cat, a, b, BinaryCoproduct( cat, CoexponentialOnObjects( cat, b, a ), a ) );
    
end; is_with_given_derivation = true );

## CocartesianPostCoComposeMorphism
@InstallMethod( AddCocartesianPostCoComposeMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianPostCoComposeMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianPostCoComposeMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianPostCoComposeMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianPostCoComposeMorphismWithGivenObjects
@InstallMethod( AddCocartesianPostCoComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianPostCoComposeMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianPostCoComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianPostCoComposeMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianPostCoComposeMorphismWithGivenObjects,
                    "CocartesianPostCoComposeMorphismWithGivenObjects by calling CocartesianPostCoComposeMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianPostCoComposeMorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CocartesianPostCoComposeMorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianPostCoComposeMorphism,
                    "CocartesianPostCoComposeMorphism by calling CocartesianPostCoComposeMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ CocartesianPostCoComposeMorphismWithGivenObjects, 1 ],
                        [ CoexponentialOnObjects, 3 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a, b, c )
    
    return CocartesianPostCoComposeMorphismWithGivenObjects( cat, CoexponentialOnObjects( cat, a, c ), a, b, c, BinaryCoproduct( cat, CoexponentialOnObjects( cat, a, b ), CoexponentialOnObjects( cat, b, c ) ) );
    
end; is_with_given_derivation = true );

## CocartesianPreCoComposeMorphism
@InstallMethod( AddCocartesianPreCoComposeMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianPreCoComposeMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianPreCoComposeMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianPreCoComposeMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianPreCoComposeMorphismWithGivenObjects
@InstallMethod( AddCocartesianPreCoComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianPreCoComposeMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianPreCoComposeMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianPreCoComposeMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianPreCoComposeMorphismWithGivenObjects,
                    "CocartesianPreCoComposeMorphismWithGivenObjects by calling CocartesianPreCoComposeMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianPreCoComposeMorphism, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CocartesianPreCoComposeMorphism( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianPreCoComposeMorphism,
                    "CocartesianPreCoComposeMorphism by calling CocartesianPreCoComposeMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ CocartesianPreCoComposeMorphismWithGivenObjects, 1 ],
                        [ CoexponentialOnObjects, 3 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a, b, c )
    
    return CocartesianPreCoComposeMorphismWithGivenObjects( cat, CoexponentialOnObjects( cat, a, c ), a, b, c, BinaryCoproduct( cat, CoexponentialOnObjects( cat, b, c ), CoexponentialOnObjects( cat, a, b ) ) );
    
end; is_with_given_derivation = true );

## CocartesianRightCoevaluationMorphism
@InstallMethod( AddCocartesianRightCoevaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightCoevaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightCoevaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightCoevaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianRightCoevaluationMorphismWithGivenSource
@InstallMethod( AddCocartesianRightCoevaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightCoevaluationMorphismWithGivenSource", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightCoevaluationMorphismWithGivenSource,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightCoevaluationMorphismWithGivenSource", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianRightCoevaluationMorphismWithGivenSource,
                    "CocartesianRightCoevaluationMorphismWithGivenSource by calling CocartesianRightCoevaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianRightCoevaluationMorphism, 1 ],
                    ],
  function( cat, a, b, s )
    
    return CocartesianRightCoevaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianRightCoevaluationMorphism,
                    "CocartesianRightCoevaluationMorphism by calling CocartesianRightCoevaluationMorphismWithGivenSource with the WithGiven object(s)",
                    [
                        [ CocartesianRightCoevaluationMorphismWithGivenSource, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a, b )
    
    return CocartesianRightCoevaluationMorphismWithGivenSource( cat, a, b, CoexponentialOnObjects( cat, BinaryCoproduct( cat, a, b ), a ) );
    
end; is_with_given_derivation = true );

## CocartesianRightEvaluationMorphism
@InstallMethod( AddCocartesianRightEvaluationMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightEvaluationMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightEvaluationMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightEvaluationMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianRightEvaluationMorphismWithGivenRange
@InstallMethod( AddCocartesianRightEvaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightEvaluationMorphismWithGivenRange", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightEvaluationMorphismWithGivenRange,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightEvaluationMorphismWithGivenRange", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianRightEvaluationMorphismWithGivenRange,
                    "CocartesianRightEvaluationMorphismWithGivenRange by calling CocartesianRightEvaluationMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianRightEvaluationMorphism, 1 ],
                    ],
  function( cat, a, b, r )
    
    return CocartesianRightEvaluationMorphism( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianRightEvaluationMorphism,
                    "CocartesianRightEvaluationMorphism by calling CocartesianRightEvaluationMorphismWithGivenRange with the WithGiven object(s)",
                    [
                        [ CocartesianRightEvaluationMorphismWithGivenRange, 1 ],
                        [ Coproduct, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                    ],
  function( cat, a, b )
    
    return CocartesianRightEvaluationMorphismWithGivenRange( cat, a, b, BinaryCoproduct( cat, a, CoexponentialOnObjects( cat, b, a ) ) );
    
end; is_with_given_derivation = true );

## CoexponentialCoproductCompatibilityMorphism
@InstallMethod( AddCoexponentialCoproductCompatibilityMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialCoproductCompatibilityMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialCoproductCompatibilityMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialCoproductCompatibilityMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoexponentialCoproductCompatibilityMorphismWithGivenObjects
@InstallMethod( AddCoexponentialCoproductCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialCoproductCompatibilityMorphismWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialCoproductCompatibilityMorphismWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialCoproductCompatibilityMorphismWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoexponentialCoproductCompatibilityMorphismWithGivenObjects,
                    "CoexponentialCoproductCompatibilityMorphismWithGivenObjects by calling CoexponentialCoproductCompatibilityMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CoexponentialCoproductCompatibilityMorphism, 1 ],
                    ],
  function( cat, source, list, range )
    
    return CoexponentialCoproductCompatibilityMorphism( cat, list );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoexponentialCoproductCompatibilityMorphism,
                    "CoexponentialCoproductCompatibilityMorphism by calling CoexponentialCoproductCompatibilityMorphismWithGivenObjects with the WithGiven object(s)",
                    [
                        [ CoexponentialCoproductCompatibilityMorphismWithGivenObjects, 1 ],
                        [ CoexponentialOnObjects, 3 ],
                        [ Coproduct, 3 ],
                    ],
  function( cat, list )
    
    return CoexponentialCoproductCompatibilityMorphismWithGivenObjects( cat, CoexponentialOnObjects( cat, BinaryCoproduct( cat, list[1], list[2] ), BinaryCoproduct( cat, list[3], list[4] ) ), list, BinaryCoproduct( cat, CoexponentialOnObjects( cat, list[1], list[3] ), CoexponentialOnObjects( cat, list[2], list[4] ) ) );
    
end; is_with_given_derivation = true );

## CoexponentialOnMorphisms
@InstallMethod( AddCoexponentialOnMorphisms,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialOnMorphisms", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialOnMorphisms,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialOnMorphisms", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoexponentialOnMorphismsWithGivenCoexponentials
@InstallMethod( AddCoexponentialOnMorphismsWithGivenCoexponentials,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialOnMorphismsWithGivenCoexponentials", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialOnMorphismsWithGivenCoexponentials,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialOnMorphismsWithGivenCoexponentials", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoexponentialOnMorphismsWithGivenCoexponentials,
                    "CoexponentialOnMorphismsWithGivenCoexponentials by calling CoexponentialOnMorphisms with the WithGiven argument(s) dropped",
                    [
                        [ CoexponentialOnMorphisms, 1 ],
                    ],
  function( cat, s, alpha, beta, r )
    
    return CoexponentialOnMorphisms( cat, alpha, beta );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoexponentialOnMorphisms,
                    "CoexponentialOnMorphisms by calling CoexponentialOnMorphismsWithGivenCoexponentials with the WithGiven object(s)",
                    [
                        [ CoexponentialOnMorphismsWithGivenCoexponentials, 1 ],
                        [ CoexponentialOnObjects, 2 ],
                    ],
  function( cat, alpha, beta )
    
    return CoexponentialOnMorphismsWithGivenCoexponentials( cat, CoexponentialOnObjects( cat, Source( alpha ), Range( beta ) ), alpha, beta, CoexponentialOnObjects( cat, Range( alpha ), Source( beta ) ) );
    
end; is_with_given_derivation = true );

## CoexponentialOnObjects
@InstallMethod( AddCoexponentialOnObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialOnObjects", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialOnObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialOnObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoexponentialToCoproductLeftAdjunctMorphism
@InstallMethod( AddCoexponentialToCoproductLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialToCoproductLeftAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialToCoproductLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialToCoproductLeftAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct
@InstallMethod( AddCoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct,
                    "CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct by calling CoexponentialToCoproductLeftAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CoexponentialToCoproductLeftAdjunctMorphism, 1 ],
                    ],
  function( cat, a, c, f, t )
    
    return CoexponentialToCoproductLeftAdjunctMorphism( cat, a, c, f );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoexponentialToCoproductLeftAdjunctMorphism,
                    "CoexponentialToCoproductLeftAdjunctMorphism by calling CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a, c, f )
    
    return CoexponentialToCoproductLeftAdjunctMorphismWithGivenCoproduct( cat, a, c, f, BinaryCoproduct( cat, Range( f ), c ) );
    
end; is_with_given_derivation = true );

## CoexponentialToCoproductRightAdjunctMorphism
@InstallMethod( AddCoexponentialToCoproductRightAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialToCoproductRightAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialToCoproductRightAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialToCoproductRightAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct
@InstallMethod( AddCoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct,
                    "CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct by calling CoexponentialToCoproductRightAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CoexponentialToCoproductRightAdjunctMorphism, 1 ],
                    ],
  function( cat, a, b, f, t )
    
    return CoexponentialToCoproductRightAdjunctMorphism( cat, a, b, f );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoexponentialToCoproductRightAdjunctMorphism,
                    "CoexponentialToCoproductRightAdjunctMorphism by calling CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a, b, f )
    
    return CoexponentialToCoproductRightAdjunctMorphismWithGivenCoproduct( cat, a, b, f, BinaryCoproduct( cat, b, Range( f ) ) );
    
end; is_with_given_derivation = true );

## CoproductToCoexponentialLeftAdjunctMorphism
@InstallMethod( AddCoproductToCoexponentialLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductToCoexponentialLeftAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCoproductToCoexponentialLeftAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductToCoexponentialLeftAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential
@InstallMethod( AddCoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential", category, func, -1 );
    
end );

@InstallMethod( AddCoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential,
                    "CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential by calling CoproductToCoexponentialLeftAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CoproductToCoexponentialLeftAdjunctMorphism, 1 ],
                    ],
  function( cat, b, c, g, i )
    
    return CoproductToCoexponentialLeftAdjunctMorphism( cat, b, c, g );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoproductToCoexponentialLeftAdjunctMorphism,
                    "CoproductToCoexponentialLeftAdjunctMorphism by calling CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential with the WithGiven object(s)",
                    [
                        [ CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                    ],
  function( cat, b, c, g )
    
    return CoproductToCoexponentialLeftAdjunctMorphismWithGivenCoexponential( cat, b, c, g, CoexponentialOnObjects( cat, Source( g ), c ) );
    
end; is_with_given_derivation = true );

## CoproductToCoexponentialRightAdjunctMorphism
@InstallMethod( AddCoproductToCoexponentialRightAdjunctMorphism,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductToCoexponentialRightAdjunctMorphism", category, func, -1 );
    
end );

@InstallMethod( AddCoproductToCoexponentialRightAdjunctMorphism,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductToCoexponentialRightAdjunctMorphism", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential
@InstallMethod( AddCoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential", category, func, -1 );
    
end );

@InstallMethod( AddCoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential,
                    "CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential by calling CoproductToCoexponentialRightAdjunctMorphism with the WithGiven argument(s) dropped",
                    [
                        [ CoproductToCoexponentialRightAdjunctMorphism, 1 ],
                    ],
  function( cat, b, c, g, i )
    
    return CoproductToCoexponentialRightAdjunctMorphism( cat, b, c, g );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoproductToCoexponentialRightAdjunctMorphism,
                    "CoproductToCoexponentialRightAdjunctMorphism by calling CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential with the WithGiven object(s)",
                    [
                        [ CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                    ],
  function( cat, b, c, g )
    
    return CoproductToCoexponentialRightAdjunctMorphismWithGivenCoexponential( cat, b, c, g, CoexponentialOnObjects( cat, Source( g ), b ) );
    
end; is_with_given_derivation = true );

## IsomorphismFromCocartesianDualObjectToCoexponentialFromInitialObject
@InstallMethod( AddIsomorphismFromCocartesianDualObjectToCoexponentialFromInitialObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromCocartesianDualObjectToCoexponentialFromInitialObject", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromCocartesianDualObjectToCoexponentialFromInitialObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromCocartesianDualObjectToCoexponentialFromInitialObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromCoexponentialFromInitialObjectToCocartesianDualObject
@InstallMethod( AddIsomorphismFromCoexponentialFromInitialObjectToCocartesianDualObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromCoexponentialFromInitialObjectToCocartesianDualObject", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromCoexponentialFromInitialObjectToCocartesianDualObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromCoexponentialFromInitialObjectToCocartesianDualObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromCoexponentialToObject
@InstallMethod( AddIsomorphismFromCoexponentialToObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromCoexponentialToObject", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromCoexponentialToObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromCoexponentialToObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromCoexponentialToObjectWithGivenCoexponential
@InstallMethod( AddIsomorphismFromCoexponentialToObjectWithGivenCoexponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromCoexponentialToObjectWithGivenCoexponential", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromCoexponentialToObjectWithGivenCoexponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromCoexponentialToObjectWithGivenCoexponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( IsomorphismFromCoexponentialToObjectWithGivenCoexponential,
                    "IsomorphismFromCoexponentialToObjectWithGivenCoexponential by calling IsomorphismFromCoexponentialToObject with the WithGiven argument(s) dropped",
                    [
                        [ IsomorphismFromCoexponentialToObject, 1 ],
                    ],
  function( cat, a, s )
    
    return IsomorphismFromCoexponentialToObject( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( IsomorphismFromCoexponentialToObject,
                    "IsomorphismFromCoexponentialToObject by calling IsomorphismFromCoexponentialToObjectWithGivenCoexponential with the WithGiven object(s)",
                    [
                        [ IsomorphismFromCoexponentialToObjectWithGivenCoexponential, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                        [ InitialObject, 1 ],
                    ],
  function( cat, a )
    
    return IsomorphismFromCoexponentialToObjectWithGivenCoexponential( cat, a, CoexponentialOnObjects( cat, a, InitialObject( cat ) ) );
    
end; is_with_given_derivation = true );

## IsomorphismFromObjectToCoexponential
@InstallMethod( AddIsomorphismFromObjectToCoexponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromObjectToCoexponential", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromObjectToCoexponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromObjectToCoexponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## IsomorphismFromObjectToCoexponentialWithGivenCoexponential
@InstallMethod( AddIsomorphismFromObjectToCoexponentialWithGivenCoexponential,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "IsomorphismFromObjectToCoexponentialWithGivenCoexponential", category, func, -1 );
    
end );

@InstallMethod( AddIsomorphismFromObjectToCoexponentialWithGivenCoexponential,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "IsomorphismFromObjectToCoexponentialWithGivenCoexponential", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( IsomorphismFromObjectToCoexponentialWithGivenCoexponential,
                    "IsomorphismFromObjectToCoexponentialWithGivenCoexponential by calling IsomorphismFromObjectToCoexponential with the WithGiven argument(s) dropped",
                    [
                        [ IsomorphismFromObjectToCoexponential, 1 ],
                    ],
  function( cat, a, r )
    
    return IsomorphismFromObjectToCoexponential( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( IsomorphismFromObjectToCoexponential,
                    "IsomorphismFromObjectToCoexponential by calling IsomorphismFromObjectToCoexponentialWithGivenCoexponential with the WithGiven object(s)",
                    [
                        [ IsomorphismFromObjectToCoexponentialWithGivenCoexponential, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                        [ InitialObject, 1 ],
                    ],
  function( cat, a )
    
    return IsomorphismFromObjectToCoexponentialWithGivenCoexponential( cat, a, CoexponentialOnObjects( cat, a, InitialObject( cat ) ) );
    
end; is_with_given_derivation = true );

## MorphismFromCocartesianBidual
@InstallMethod( AddMorphismFromCocartesianBidual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromCocartesianBidual", category, func, -1 );
    
end );

@InstallMethod( AddMorphismFromCocartesianBidual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromCocartesianBidual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## MorphismFromCocartesianBidualWithGivenCocartesianBidual
@InstallMethod( AddMorphismFromCocartesianBidualWithGivenCocartesianBidual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromCocartesianBidualWithGivenCocartesianBidual", category, func, -1 );
    
end );

@InstallMethod( AddMorphismFromCocartesianBidualWithGivenCocartesianBidual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromCocartesianBidualWithGivenCocartesianBidual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MorphismFromCocartesianBidualWithGivenCocartesianBidual,
                    "MorphismFromCocartesianBidualWithGivenCocartesianBidual by calling MorphismFromCocartesianBidual with the WithGiven argument(s) dropped",
                    [
                        [ MorphismFromCocartesianBidual, 1 ],
                    ],
  function( cat, a, s )
    
    return MorphismFromCocartesianBidual( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( MorphismFromCocartesianBidual,
                    "MorphismFromCocartesianBidual by calling MorphismFromCocartesianBidualWithGivenCocartesianBidual with the WithGiven object(s)",
                    [
                        [ MorphismFromCocartesianBidualWithGivenCocartesianBidual, 1 ],
                        [ CocartesianDualOnObjects, 2 ],
                    ],
  function( cat, a )
    
    return MorphismFromCocartesianBidualWithGivenCocartesianBidual( cat, a, CocartesianDualOnObjects( cat, CocartesianDualOnObjects( cat, a ) ) );
    
end; is_with_given_derivation = true );

## MorphismFromCoexponentialToCoproduct
@InstallMethod( AddMorphismFromCoexponentialToCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromCoexponentialToCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddMorphismFromCoexponentialToCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromCoexponentialToCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## MorphismFromCoexponentialToCoproductWithGivenObjects
@InstallMethod( AddMorphismFromCoexponentialToCoproductWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromCoexponentialToCoproductWithGivenObjects", category, func, -1 );
    
end );

@InstallMethod( AddMorphismFromCoexponentialToCoproductWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromCoexponentialToCoproductWithGivenObjects", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MorphismFromCoexponentialToCoproductWithGivenObjects,
                    "MorphismFromCoexponentialToCoproductWithGivenObjects by calling MorphismFromCoexponentialToCoproduct with the WithGiven argument(s) dropped",
                    [
                        [ MorphismFromCoexponentialToCoproduct, 1 ],
                    ],
  function( cat, s, a, b, r )
    
    return MorphismFromCoexponentialToCoproduct( cat, a, b );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( MorphismFromCoexponentialToCoproduct,
                    "MorphismFromCoexponentialToCoproduct by calling MorphismFromCoexponentialToCoproductWithGivenObjects with the WithGiven object(s)",
                    [
                        [ MorphismFromCoexponentialToCoproductWithGivenObjects, 1 ],
                        [ CoexponentialOnObjects, 1 ],
                        [ Coproduct, 1 ],
                        [ CocartesianDualOnObjects, 1 ],
                    ],
  function( cat, a, b )
    
    return MorphismFromCoexponentialToCoproductWithGivenObjects( cat, CoexponentialOnObjects( cat, a, b ), a, b, BinaryCoproduct( cat, CocartesianDualOnObjects( cat, b ), a ) );
    
end; is_with_given_derivation = true );

## UniversalPropertyOfCocartesianDual
@InstallMethod( AddUniversalPropertyOfCocartesianDual,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalPropertyOfCocartesianDual", category, func, -1 );
    
end );

@InstallMethod( AddUniversalPropertyOfCocartesianDual,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalPropertyOfCocartesianDual", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);
