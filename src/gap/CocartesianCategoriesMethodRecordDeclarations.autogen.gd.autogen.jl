# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

#! @Chapter Cocartesian Categories

#! @Section Add-methods

#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianAssociatorLeftToRight`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[CocartesianAssociatorLeftToRight](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianAssociatorLeftToRightWithGivenCoproducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[CocartesianAssociatorLeftToRightWithGivenCoproducts](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianAssociatorLeftToRightWithGivenCoproducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianAssociatorLeftToRightWithGivenCoproducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianAssociatorRightToLeft`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[CocartesianAssociatorRightToLeft](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianAssociatorRightToLeftWithGivenCoproducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[CocartesianAssociatorRightToLeftWithGivenCoproducts](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianAssociatorRightToLeftWithGivenCoproducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianAssociatorRightToLeftWithGivenCoproducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianCodiagonal`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, n ) \mapsto \mathtt[CocartesianCodiagonal](a, n)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianCodiagonal",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianCodiagonal",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianCodiagonalWithGivenCocartesianMultiple`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, n, cocartesian_multiple ) \mapsto \mathtt[CocartesianCodiagonalWithGivenCocartesianMultiple](a, n, cocartesian_multiple)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianCodiagonalWithGivenCocartesianMultiple",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianCodiagonalWithGivenCocartesianMultiple",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianLeftUnitor`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CocartesianLeftUnitor](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianLeftUnitor",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianLeftUnitor",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianLeftUnitorInverse`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CocartesianLeftUnitorInverse](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianLeftUnitorInverse",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianLeftUnitorInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianLeftUnitorInverseWithGivenCoproduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, r ) \mapsto \mathtt[CocartesianLeftUnitorInverseWithGivenCoproduct](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianLeftUnitorInverseWithGivenCoproduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianLeftUnitorInverseWithGivenCoproduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianLeftUnitorWithGivenCoproduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, s ) \mapsto \mathtt[CocartesianLeftUnitorWithGivenCoproduct](a, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianLeftUnitorWithGivenCoproduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianLeftUnitorWithGivenCoproduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianRightUnitor`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CocartesianRightUnitor](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianRightUnitor",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianRightUnitor",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianRightUnitorInverse`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CocartesianRightUnitorInverse](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianRightUnitorInverse",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianRightUnitorInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianRightUnitorInverseWithGivenCoproduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, r ) \mapsto \mathtt[CocartesianRightUnitorInverseWithGivenCoproduct](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianRightUnitorInverseWithGivenCoproduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianRightUnitorInverseWithGivenCoproduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CocartesianRightUnitorWithGivenCoproduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, s ) \mapsto \mathtt[CocartesianRightUnitorWithGivenCoproduct](a, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCocartesianRightUnitorWithGivenCoproduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCocartesianRightUnitorWithGivenCoproduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CoproductOnMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( alpha, beta ) \mapsto \mathtt[CoproductOnMorphisms](alpha, beta)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCoproductOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCoproductOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CoproductOnMorphismsWithGivenCoproducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, alpha, beta, r ) \mapsto \mathtt[CoproductOnMorphismsWithGivenCoproducts](s, alpha, beta, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCoproductOnMorphismsWithGivenCoproducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCoproductOnMorphismsWithGivenCoproducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup

