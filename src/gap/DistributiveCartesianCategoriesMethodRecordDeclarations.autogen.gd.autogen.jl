# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

#! @Chapter Cartesian Categories

#! @Section Add-methods

#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCartesianDistributivityExpanding`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, L ) \mapsto \mathtt[LeftCartesianDistributivityExpanding](a, L)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLeftCartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddLeftCartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCartesianDistributivityExpandingWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, L, r ) \mapsto \mathtt[LeftCartesianDistributivityExpandingWithGivenObjects](s, a, L, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLeftCartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddLeftCartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCartesianDistributivityFactoring`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, L ) \mapsto \mathtt[LeftCartesianDistributivityFactoring](a, L)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLeftCartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddLeftCartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCartesianDistributivityFactoringWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, L, r ) \mapsto \mathtt[LeftCartesianDistributivityFactoringWithGivenObjects](s, a, L, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLeftCartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddLeftCartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCartesianDistributivityExpanding`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( L, a ) \mapsto \mathtt[RightCartesianDistributivityExpanding](L, a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddRightCartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddRightCartesianDistributivityExpanding",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCartesianDistributivityExpandingWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, L, a, r ) \mapsto \mathtt[RightCartesianDistributivityExpandingWithGivenObjects](s, L, a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddRightCartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddRightCartesianDistributivityExpandingWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCartesianDistributivityFactoring`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( L, a ) \mapsto \mathtt[RightCartesianDistributivityFactoring](L, a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddRightCartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddRightCartesianDistributivityFactoring",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RightCartesianDistributivityFactoringWithGivenObjects`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, L, a, r ) \mapsto \mathtt[RightCartesianDistributivityFactoringWithGivenObjects](s, L, a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddRightCartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddRightCartesianDistributivityFactoringWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup

