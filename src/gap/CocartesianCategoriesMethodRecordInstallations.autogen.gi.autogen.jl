# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## CocartesianAssociatorLeftToRight
@InstallMethod( AddCocartesianAssociatorLeftToRight,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianAssociatorLeftToRight", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianAssociatorLeftToRight,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianAssociatorLeftToRight", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianAssociatorLeftToRightWithGivenCoproducts
@InstallMethod( AddCocartesianAssociatorLeftToRightWithGivenCoproducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianAssociatorLeftToRightWithGivenCoproducts", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianAssociatorLeftToRightWithGivenCoproducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianAssociatorLeftToRightWithGivenCoproducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianAssociatorLeftToRightWithGivenCoproducts,
                    "CocartesianAssociatorLeftToRightWithGivenCoproducts by calling CocartesianAssociatorLeftToRight with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianAssociatorLeftToRight, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CocartesianAssociatorLeftToRight( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianAssociatorLeftToRight,
                    "CocartesianAssociatorLeftToRight by calling CocartesianAssociatorLeftToRightWithGivenCoproducts with the WithGiven object(s)",
                    [
                        [ CocartesianAssociatorLeftToRightWithGivenCoproducts, 1 ],
                        [ Coproduct, 4 ],
                    ],
  function( cat, a, b, c )
    
    return CocartesianAssociatorLeftToRightWithGivenCoproducts( cat, BinaryCoproduct( cat, BinaryCoproduct( cat, a, b ), c ), a, b, c, BinaryCoproduct( cat, a, BinaryCoproduct( cat, b, c ) ) );
    
end; is_with_given_derivation = true );

## CocartesianAssociatorRightToLeft
@InstallMethod( AddCocartesianAssociatorRightToLeft,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianAssociatorRightToLeft", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianAssociatorRightToLeft,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianAssociatorRightToLeft", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianAssociatorRightToLeftWithGivenCoproducts
@InstallMethod( AddCocartesianAssociatorRightToLeftWithGivenCoproducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianAssociatorRightToLeftWithGivenCoproducts", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianAssociatorRightToLeftWithGivenCoproducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianAssociatorRightToLeftWithGivenCoproducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianAssociatorRightToLeftWithGivenCoproducts,
                    "CocartesianAssociatorRightToLeftWithGivenCoproducts by calling CocartesianAssociatorRightToLeft with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianAssociatorRightToLeft, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CocartesianAssociatorRightToLeft( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianAssociatorRightToLeft,
                    "CocartesianAssociatorRightToLeft by calling CocartesianAssociatorRightToLeftWithGivenCoproducts with the WithGiven object(s)",
                    [
                        [ CocartesianAssociatorRightToLeftWithGivenCoproducts, 1 ],
                        [ Coproduct, 4 ],
                    ],
  function( cat, a, b, c )
    
    return CocartesianAssociatorRightToLeftWithGivenCoproducts( cat, BinaryCoproduct( cat, a, BinaryCoproduct( cat, b, c ) ), a, b, c, BinaryCoproduct( cat, BinaryCoproduct( cat, a, b ), c ) );
    
end; is_with_given_derivation = true );

## CocartesianCodiagonal
@InstallMethod( AddCocartesianCodiagonal,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianCodiagonal", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianCodiagonal,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianCodiagonal", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianCodiagonalWithGivenCocartesianMultiple
@InstallMethod( AddCocartesianCodiagonalWithGivenCocartesianMultiple,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianCodiagonalWithGivenCocartesianMultiple", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianCodiagonalWithGivenCocartesianMultiple,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianCodiagonalWithGivenCocartesianMultiple", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLeftUnitor
@InstallMethod( AddCocartesianLeftUnitor,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftUnitor", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftUnitor,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftUnitor", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLeftUnitorInverse
@InstallMethod( AddCocartesianLeftUnitorInverse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftUnitorInverse", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftUnitorInverse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftUnitorInverse", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianLeftUnitorInverseWithGivenCoproduct
@InstallMethod( AddCocartesianLeftUnitorInverseWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftUnitorInverseWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftUnitorInverseWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftUnitorInverseWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianLeftUnitorInverseWithGivenCoproduct,
                    "CocartesianLeftUnitorInverseWithGivenCoproduct by calling CocartesianLeftUnitorInverse with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianLeftUnitorInverse, 1 ],
                    ],
  function( cat, a, r )
    
    return CocartesianLeftUnitorInverse( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianLeftUnitorInverse,
                    "CocartesianLeftUnitorInverse by calling CocartesianLeftUnitorInverseWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CocartesianLeftUnitorInverseWithGivenCoproduct, 1 ],
                        [ InitialObject, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a )
    
    return CocartesianLeftUnitorInverseWithGivenCoproduct( cat, a, BinaryCoproduct( cat, InitialObject( cat ), a ) );
    
end; is_with_given_derivation = true );

## CocartesianLeftUnitorWithGivenCoproduct
@InstallMethod( AddCocartesianLeftUnitorWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianLeftUnitorWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianLeftUnitorWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianLeftUnitorWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianLeftUnitorWithGivenCoproduct,
                    "CocartesianLeftUnitorWithGivenCoproduct by calling CocartesianLeftUnitor with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianLeftUnitor, 1 ],
                    ],
  function( cat, a, s )
    
    return CocartesianLeftUnitor( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianLeftUnitor,
                    "CocartesianLeftUnitor by calling CocartesianLeftUnitorWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CocartesianLeftUnitorWithGivenCoproduct, 1 ],
                        [ InitialObject, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a )
    
    return CocartesianLeftUnitorWithGivenCoproduct( cat, a, BinaryCoproduct( cat, InitialObject( cat ), a ) );
    
end; is_with_given_derivation = true );

## CocartesianRightUnitor
@InstallMethod( AddCocartesianRightUnitor,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightUnitor", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightUnitor,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightUnitor", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianRightUnitorInverse
@InstallMethod( AddCocartesianRightUnitorInverse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightUnitorInverse", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightUnitorInverse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightUnitorInverse", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CocartesianRightUnitorInverseWithGivenCoproduct
@InstallMethod( AddCocartesianRightUnitorInverseWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightUnitorInverseWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightUnitorInverseWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightUnitorInverseWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianRightUnitorInverseWithGivenCoproduct,
                    "CocartesianRightUnitorInverseWithGivenCoproduct by calling CocartesianRightUnitorInverse with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianRightUnitorInverse, 1 ],
                    ],
  function( cat, a, r )
    
    return CocartesianRightUnitorInverse( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianRightUnitorInverse,
                    "CocartesianRightUnitorInverse by calling CocartesianRightUnitorInverseWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CocartesianRightUnitorInverseWithGivenCoproduct, 1 ],
                        [ InitialObject, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a )
    
    return CocartesianRightUnitorInverseWithGivenCoproduct( cat, a, BinaryCoproduct( cat, a, InitialObject( cat ) ) );
    
end; is_with_given_derivation = true );

## CocartesianRightUnitorWithGivenCoproduct
@InstallMethod( AddCocartesianRightUnitorWithGivenCoproduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CocartesianRightUnitorWithGivenCoproduct", category, func, -1 );
    
end );

@InstallMethod( AddCocartesianRightUnitorWithGivenCoproduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CocartesianRightUnitorWithGivenCoproduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CocartesianRightUnitorWithGivenCoproduct,
                    "CocartesianRightUnitorWithGivenCoproduct by calling CocartesianRightUnitor with the WithGiven argument(s) dropped",
                    [
                        [ CocartesianRightUnitor, 1 ],
                    ],
  function( cat, a, s )
    
    return CocartesianRightUnitor( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CocartesianRightUnitor,
                    "CocartesianRightUnitor by calling CocartesianRightUnitorWithGivenCoproduct with the WithGiven object(s)",
                    [
                        [ CocartesianRightUnitorWithGivenCoproduct, 1 ],
                        [ InitialObject, 1 ],
                        [ Coproduct, 1 ],
                    ],
  function( cat, a )
    
    return CocartesianRightUnitorWithGivenCoproduct( cat, a, BinaryCoproduct( cat, a, InitialObject( cat ) ) );
    
end; is_with_given_derivation = true );

## CoproductOnMorphisms
@InstallMethod( AddCoproductOnMorphisms,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductOnMorphisms", category, func, -1 );
    
end );

@InstallMethod( AddCoproductOnMorphisms,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductOnMorphisms", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CoproductOnMorphismsWithGivenCoproducts
@InstallMethod( AddCoproductOnMorphismsWithGivenCoproducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CoproductOnMorphismsWithGivenCoproducts", category, func, -1 );
    
end );

@InstallMethod( AddCoproductOnMorphismsWithGivenCoproducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CoproductOnMorphismsWithGivenCoproducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CoproductOnMorphismsWithGivenCoproducts,
                    "CoproductOnMorphismsWithGivenCoproducts by calling CoproductOnMorphisms with the WithGiven argument(s) dropped",
                    [
                        [ CoproductOnMorphisms, 1 ],
                    ],
  function( cat, s, alpha, beta, r )
    
    return CoproductOnMorphisms( cat, alpha, beta );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CoproductOnMorphisms,
                    "CoproductOnMorphisms by calling CoproductOnMorphismsWithGivenCoproducts with the WithGiven object(s)",
                    [
                        [ CoproductOnMorphismsWithGivenCoproducts, 1 ],
                        [ Coproduct, 2 ],
                    ],
  function( cat, alpha, beta )
    
    return CoproductOnMorphismsWithGivenCoproducts( cat, BinaryCoproduct( cat, Source( alpha ), Source( beta ) ), alpha, beta, BinaryCoproduct( cat, Range( alpha ), Range( beta ) ) );
    
end; is_with_given_derivation = true );
