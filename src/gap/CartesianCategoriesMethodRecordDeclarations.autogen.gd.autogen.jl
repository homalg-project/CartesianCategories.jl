# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

#! @Chapter Cartesian Categories

#! @Section Add-methods

#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorLeftToRight`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[CartesianAssociatorLeftToRight](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianAssociatorLeftToRight",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorLeftToRightWithGivenDirectProducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[CartesianAssociatorLeftToRightWithGivenDirectProducts](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianAssociatorLeftToRightWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianAssociatorLeftToRightWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorRightToLeft`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[CartesianAssociatorRightToLeft](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianAssociatorRightToLeft",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianAssociatorRightToLeftWithGivenDirectProducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[CartesianAssociatorRightToLeftWithGivenDirectProducts](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianAssociatorRightToLeftWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianAssociatorRightToLeftWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianDiagonal`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, n ) \mapsto \mathtt[CartesianDiagonal](a, n)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianDiagonal",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianDiagonal",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianDiagonalWithGivenCartesianPower`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, n, cartesian_power ) \mapsto \mathtt[CartesianDiagonalWithGivenCartesianPower](a, n, cartesian_power)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianDiagonalWithGivenCartesianPower",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianDiagonalWithGivenCartesianPower",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitor`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CartesianLeftUnitor](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftUnitor",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftUnitor",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitorInverse`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CartesianLeftUnitorInverse](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftUnitorInverse",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftUnitorInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitorInverseWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, r ) \mapsto \mathtt[CartesianLeftUnitorInverseWithGivenDirectProduct](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianLeftUnitorWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, s ) \mapsto \mathtt[CartesianLeftUnitorWithGivenDirectProduct](a, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianLeftUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianLeftUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitor`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CartesianRightUnitor](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightUnitor",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightUnitor",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitorInverse`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a ) \mapsto \mathtt[CartesianRightUnitorInverse](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightUnitorInverse",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightUnitorInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitorInverseWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, r ) \mapsto \mathtt[CartesianRightUnitorInverseWithGivenDirectProduct](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightUnitorInverseWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CartesianRightUnitorWithGivenDirectProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, s ) \mapsto \mathtt[CartesianRightUnitorWithGivenDirectProduct](a, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddCartesianRightUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddCartesianRightUnitorWithGivenDirectProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductOnMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( alpha, beta ) \mapsto \mathtt[DirectProductOnMorphisms](alpha, beta)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DirectProductOnMorphismsWithGivenDirectProducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( s, alpha, beta, r ) \mapsto \mathtt[DirectProductOnMorphismsWithGivenDirectProducts](s, alpha, beta, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDirectProductOnMorphismsWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddDirectProductOnMorphismsWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup

