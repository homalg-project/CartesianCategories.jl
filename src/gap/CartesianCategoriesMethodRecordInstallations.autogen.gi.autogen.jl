# SPDX-License-Identifier: GPL-2.0-or-later
# CartesianCategories: Cartesian and cocartesian categories and various subdoctrines
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## CartesianAssociatorLeftToRight
@InstallMethod( AddCartesianAssociatorLeftToRight,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianAssociatorLeftToRight", category, func, -1 );
    
end );

@InstallMethod( AddCartesianAssociatorLeftToRight,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianAssociatorLeftToRight", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianAssociatorLeftToRightWithGivenDirectProducts
@InstallMethod( AddCartesianAssociatorLeftToRightWithGivenDirectProducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianAssociatorLeftToRightWithGivenDirectProducts", category, func, -1 );
    
end );

@InstallMethod( AddCartesianAssociatorLeftToRightWithGivenDirectProducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianAssociatorLeftToRightWithGivenDirectProducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianAssociatorLeftToRightWithGivenDirectProducts,
                    "CartesianAssociatorLeftToRightWithGivenDirectProducts by calling CartesianAssociatorLeftToRight with the WithGiven argument(s) dropped",
                    [
                        [ CartesianAssociatorLeftToRight, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CartesianAssociatorLeftToRight( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianAssociatorLeftToRight,
                    "CartesianAssociatorLeftToRight by calling CartesianAssociatorLeftToRightWithGivenDirectProducts with the WithGiven object(s)",
                    [
                        [ CartesianAssociatorLeftToRightWithGivenDirectProducts, 1 ],
                        [ DirectProduct, 4 ],
                    ],
  function( cat, a, b, c )
    
    return CartesianAssociatorLeftToRightWithGivenDirectProducts( cat, BinaryDirectProduct( cat, BinaryDirectProduct( cat, a, b ), c ), a, b, c, BinaryDirectProduct( cat, a, BinaryDirectProduct( cat, b, c ) ) );
    
end; is_with_given_derivation = true );

## CartesianAssociatorRightToLeft
@InstallMethod( AddCartesianAssociatorRightToLeft,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianAssociatorRightToLeft", category, func, -1 );
    
end );

@InstallMethod( AddCartesianAssociatorRightToLeft,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianAssociatorRightToLeft", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianAssociatorRightToLeftWithGivenDirectProducts
@InstallMethod( AddCartesianAssociatorRightToLeftWithGivenDirectProducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianAssociatorRightToLeftWithGivenDirectProducts", category, func, -1 );
    
end );

@InstallMethod( AddCartesianAssociatorRightToLeftWithGivenDirectProducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianAssociatorRightToLeftWithGivenDirectProducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianAssociatorRightToLeftWithGivenDirectProducts,
                    "CartesianAssociatorRightToLeftWithGivenDirectProducts by calling CartesianAssociatorRightToLeft with the WithGiven argument(s) dropped",
                    [
                        [ CartesianAssociatorRightToLeft, 1 ],
                    ],
  function( cat, s, a, b, c, r )
    
    return CartesianAssociatorRightToLeft( cat, a, b, c );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianAssociatorRightToLeft,
                    "CartesianAssociatorRightToLeft by calling CartesianAssociatorRightToLeftWithGivenDirectProducts with the WithGiven object(s)",
                    [
                        [ CartesianAssociatorRightToLeftWithGivenDirectProducts, 1 ],
                        [ DirectProduct, 4 ],
                    ],
  function( cat, a, b, c )
    
    return CartesianAssociatorRightToLeftWithGivenDirectProducts( cat, BinaryDirectProduct( cat, a, BinaryDirectProduct( cat, b, c ) ), a, b, c, BinaryDirectProduct( cat, BinaryDirectProduct( cat, a, b ), c ) );
    
end; is_with_given_derivation = true );

## CartesianDiagonal
@InstallMethod( AddCartesianDiagonal,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianDiagonal", category, func, -1 );
    
end );

@InstallMethod( AddCartesianDiagonal,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianDiagonal", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianDiagonalWithGivenCartesianPower
@InstallMethod( AddCartesianDiagonalWithGivenCartesianPower,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianDiagonalWithGivenCartesianPower", category, func, -1 );
    
end );

@InstallMethod( AddCartesianDiagonalWithGivenCartesianPower,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianDiagonalWithGivenCartesianPower", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLeftUnitor
@InstallMethod( AddCartesianLeftUnitor,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftUnitor", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftUnitor,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftUnitor", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLeftUnitorInverse
@InstallMethod( AddCartesianLeftUnitorInverse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftUnitorInverse", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftUnitorInverse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftUnitorInverse", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianLeftUnitorInverseWithGivenDirectProduct
@InstallMethod( AddCartesianLeftUnitorInverseWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftUnitorInverseWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftUnitorInverseWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftUnitorInverseWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianLeftUnitorInverseWithGivenDirectProduct,
                    "CartesianLeftUnitorInverseWithGivenDirectProduct by calling CartesianLeftUnitorInverse with the WithGiven argument(s) dropped",
                    [
                        [ CartesianLeftUnitorInverse, 1 ],
                    ],
  function( cat, a, r )
    
    return CartesianLeftUnitorInverse( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianLeftUnitorInverse,
                    "CartesianLeftUnitorInverse by calling CartesianLeftUnitorInverseWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ CartesianLeftUnitorInverseWithGivenDirectProduct, 1 ],
                        [ TerminalObject, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a )
    
    return CartesianLeftUnitorInverseWithGivenDirectProduct( cat, a, BinaryDirectProduct( cat, TerminalObject( cat ), a ) );
    
end; is_with_given_derivation = true );

## CartesianLeftUnitorWithGivenDirectProduct
@InstallMethod( AddCartesianLeftUnitorWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianLeftUnitorWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddCartesianLeftUnitorWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianLeftUnitorWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianLeftUnitorWithGivenDirectProduct,
                    "CartesianLeftUnitorWithGivenDirectProduct by calling CartesianLeftUnitor with the WithGiven argument(s) dropped",
                    [
                        [ CartesianLeftUnitor, 1 ],
                    ],
  function( cat, a, s )
    
    return CartesianLeftUnitor( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianLeftUnitor,
                    "CartesianLeftUnitor by calling CartesianLeftUnitorWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ CartesianLeftUnitorWithGivenDirectProduct, 1 ],
                        [ TerminalObject, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a )
    
    return CartesianLeftUnitorWithGivenDirectProduct( cat, a, BinaryDirectProduct( cat, TerminalObject( cat ), a ) );
    
end; is_with_given_derivation = true );

## CartesianRightUnitor
@InstallMethod( AddCartesianRightUnitor,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightUnitor", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightUnitor,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightUnitor", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianRightUnitorInverse
@InstallMethod( AddCartesianRightUnitorInverse,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightUnitorInverse", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightUnitorInverse,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightUnitorInverse", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## CartesianRightUnitorInverseWithGivenDirectProduct
@InstallMethod( AddCartesianRightUnitorInverseWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightUnitorInverseWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightUnitorInverseWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightUnitorInverseWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianRightUnitorInverseWithGivenDirectProduct,
                    "CartesianRightUnitorInverseWithGivenDirectProduct by calling CartesianRightUnitorInverse with the WithGiven argument(s) dropped",
                    [
                        [ CartesianRightUnitorInverse, 1 ],
                    ],
  function( cat, a, r )
    
    return CartesianRightUnitorInverse( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianRightUnitorInverse,
                    "CartesianRightUnitorInverse by calling CartesianRightUnitorInverseWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ CartesianRightUnitorInverseWithGivenDirectProduct, 1 ],
                        [ TerminalObject, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a )
    
    return CartesianRightUnitorInverseWithGivenDirectProduct( cat, a, BinaryDirectProduct( cat, a, TerminalObject( cat ) ) );
    
end; is_with_given_derivation = true );

## CartesianRightUnitorWithGivenDirectProduct
@InstallMethod( AddCartesianRightUnitorWithGivenDirectProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "CartesianRightUnitorWithGivenDirectProduct", category, func, -1 );
    
end );

@InstallMethod( AddCartesianRightUnitorWithGivenDirectProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "CartesianRightUnitorWithGivenDirectProduct", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( CartesianRightUnitorWithGivenDirectProduct,
                    "CartesianRightUnitorWithGivenDirectProduct by calling CartesianRightUnitor with the WithGiven argument(s) dropped",
                    [
                        [ CartesianRightUnitor, 1 ],
                    ],
  function( cat, a, s )
    
    return CartesianRightUnitor( cat, a );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( CartesianRightUnitor,
                    "CartesianRightUnitor by calling CartesianRightUnitorWithGivenDirectProduct with the WithGiven object(s)",
                    [
                        [ CartesianRightUnitorWithGivenDirectProduct, 1 ],
                        [ TerminalObject, 1 ],
                        [ DirectProduct, 1 ],
                    ],
  function( cat, a )
    
    return CartesianRightUnitorWithGivenDirectProduct( cat, a, BinaryDirectProduct( cat, a, TerminalObject( cat ) ) );
    
end; is_with_given_derivation = true );

## DirectProductOnMorphisms
@InstallMethod( AddDirectProductOnMorphisms,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductOnMorphisms", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductOnMorphisms,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductOnMorphisms", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## DirectProductOnMorphismsWithGivenDirectProducts
@InstallMethod( AddDirectProductOnMorphismsWithGivenDirectProducts,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectProductOnMorphismsWithGivenDirectProducts", category, func, -1 );
    
end );

@InstallMethod( AddDirectProductOnMorphismsWithGivenDirectProducts,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectProductOnMorphismsWithGivenDirectProducts", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( DirectProductOnMorphismsWithGivenDirectProducts,
                    "DirectProductOnMorphismsWithGivenDirectProducts by calling DirectProductOnMorphisms with the WithGiven argument(s) dropped",
                    [
                        [ DirectProductOnMorphisms, 1 ],
                    ],
  function( cat, s, alpha, beta, r )
    
    return DirectProductOnMorphisms( cat, alpha, beta );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( DirectProductOnMorphisms,
                    "DirectProductOnMorphisms by calling DirectProductOnMorphismsWithGivenDirectProducts with the WithGiven object(s)",
                    [
                        [ DirectProductOnMorphismsWithGivenDirectProducts, 1 ],
                        [ DirectProduct, 2 ],
                    ],
  function( cat, alpha, beta )
    
    return DirectProductOnMorphismsWithGivenDirectProducts( cat, BinaryDirectProduct( cat, Source( alpha ), Source( beta ) ), alpha, beta, BinaryDirectProduct( cat, Range( alpha ), Range( beta ) ) );
    
end; is_with_given_derivation = true );
